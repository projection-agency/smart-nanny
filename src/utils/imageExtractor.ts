/**
 * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ JSON-LD —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
 */

export interface ImageObject {
  "@type": "ImageObject";
  "inLanguage": string;
  "@id": string;
  "url": string;
  "contentUrl": string;
  "width": number;
  "height": number;
}

export interface StructuredData {
  "@context": string;
  "@graph": Array<{
    "@type": string;
    "@id": string;
    "primaryImage"?: ImageObject;
    "image"?: ImageObject | ImageObject[];
    [key: string]: unknown;
  }>;
}

/**
 * –í–∏—Ç—è–≥—É—î URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ JSON-LD —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
 * @param structuredData - JSON-LD —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö
 * @returns URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ null, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
 */
export function extractImageFromStructuredData(structuredData: StructuredData): string | null {
  try {
    console.log("üîç –®—É–∫–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ JSON-LD:", structuredData);
    
    // –®—É–∫–∞—î–º–æ primaryImage –≤ @graph
    for (const item of structuredData["@graph"]) {
      console.log("üìÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ item:", item);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ primaryImage
      if (item.primaryImage && typeof item.primaryImage === "object") {
        const image = item.primaryImage as ImageObject;
        console.log("üñºÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ primaryImage:", image);
        if (image.url) {
          console.log("‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ URL:", image.url);
          return image.url;
        }
        if (image.contentUrl) {
          console.log("‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ contentUrl:", image.contentUrl);
          return image.contentUrl;
        }
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ image (–º–æ–∂–µ –±—É—Ç–∏ –º–∞—Å–∏–≤–æ–º –∞–±–æ –æ–±'—î–∫—Ç–æ–º)
      if (item.image) {
        console.log("üñºÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ image:", item.image);
        if (Array.isArray(item.image)) {
          // –Ø–∫—â–æ image - —Ü–µ –º–∞—Å–∏–≤, –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
          const firstImage = item.image[0] as ImageObject;
          if (firstImage.url) {
            console.log("‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ URL –∑ –º–∞—Å–∏–≤—É:", firstImage.url);
            return firstImage.url;
          }
          if (firstImage.contentUrl) {
            console.log("‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ contentUrl –∑ –º–∞—Å–∏–≤—É:", firstImage.contentUrl);
            return firstImage.contentUrl;
          }
        } else if (typeof item.image === "object") {
          // –Ø–∫—â–æ image - —Ü–µ –æ–±'—î–∫—Ç
          const image = item.image as ImageObject;
          if (image.url) {
            console.log("‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ URL –∑ –æ–±'—î–∫—Ç–∞:", image.url);
            return image.url;
          }
          if (image.contentUrl) {
            console.log("‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ contentUrl –∑ –æ–±'—î–∫—Ç–∞:", image.contentUrl);
            return image.contentUrl;
          }
        }
      }
    }

    console.log("‚ùå –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ JSON-LD");
    return null;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ JSON-LD:", error);
    return null;
  }
}

interface ImageGraphObject {
  "@type": "ImageObject";
  inLanguage?: string;
  "@id"?: string;
  url?: string;
  contentUrl?: string;
  width?: number;
  height?: number;
  [key: string]: unknown;
}

interface YoastSchema {
  "@context"?: string;
  "@graph"?: ImageGraphObject[];
}

interface WordPressPost {
  yoast_head_json?: {
    schema?: YoastSchema;
  };
  _embedded?: {
    "wp:featuredmedia"?: Array<{ source_url: string }>;
  };
  featured_image_url?: string;
  [key: string]: unknown;
}

/**
 * –í–∏—Ç—è–≥—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª (JSON-LD, WordPress API, fallback)
 * @param post - –ü–æ—Å—Ç –∑ WordPress API
 * @param structuredData - JSON-LD —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 * @returns URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
export function extractImageFromPost(
  post: WordPressPost
): string {
  // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ JSON-LD —É yoast_head_json.schema
  const graph = post?.yoast_head_json?.schema?.['@graph'];
  if (Array.isArray(graph)) {
    const imageObj = graph.find((item) => item['@type'] === 'ImageObject') as ImageGraphObject | undefined;
    if (imageObj) {
      if (imageObj.url) return imageObj.url;
      if (imageObj.contentUrl) return imageObj.contentUrl;
    }
  }

  // 2. WordPress API —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–ª—è
  if (post._embedded?.["wp:featuredmedia"]?.[0]?.source_url) {
    return post._embedded["wp:featuredmedia"][0].source_url;
  }
  if (post.featured_image_url) {
    return post.featured_image_url;
  }

  // 3. Fallback
  return "/images/program-item-video.jpg";
} 